<<<<<<< Updated upstream
<<<<<<< Updated upstream
//ðŸ§©Don't Edit this file.âœ¨Generated in Fri Mar 22 2024 16:42:41 GMT+0800 (Singapore Standard Time)âœ¨
=======
//ðŸ§©Don't Edit this file.âœ¨Generated in Sun Mar 24 2024 16:56:42 GMT+0800 (Philippine Standard Time)âœ¨
>>>>>>> Stashed changes
=======
//ðŸ§©Don't Edit this file.âœ¨Generated in Sun Mar 24 2024 18:02:53 GMT+0800 (Philippine Standard Time)âœ¨
>>>>>>> Stashed changes

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Clubs {
  id        String    @id @default(uuid()) @map("_id")
  clubLink  String
  clubId    String    @unique
  clubName  String
  founderId String?
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")
  founder   users?    @relation(fields: [founderId], references: [id])
}

model Package {
  id          String    @id @default(uuid()) @map("_id")
  packageName String
  features    String[]
  monthlyRate Float
  yearlyRate  Float
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @default(now()) @map("updated_at")
}

enum UserTypeEnum {
  ADMIN
  FOUNDER
  USER
  STAFF
}

enum PaymentStatusEnum {
  SUCCESS
  FAILED
  REFUND
  CANCELLED
  PENDING
}

enum Rating {
  TERRIBLE
  BAD
  OKAY
  GOOD
  GREAT
}

enum Gender {
  MALE
  FEMALE
}

enum SesssionType {
  OPENPLAY
  TRAINING
  TOURNAMENT
}

enum RecordStatus {
  DELETED
  ACTIVE
}

enum Marketing {
  FACEBOOK
  TIKTOK
  INSTAGRAM
}

model Faq {
  id        String   @id @default(uuid()) @map("_id")
  question  String
  answer    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

model Feedbacks {
  id               String   @id @default(uuid()) @map("_id")
  experience       String?
  difficultProcess String?
  rating           Rating
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")
}

model Survey {
  id        String    @id @default(uuid()) @map("_id")
  marketing Marketing
  userId    String    @unique
  user      users     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
}

model payments {
  id                String            @id @default(uuid()) @map("_id")
  email             String
  subSessionId      String
  amount            Float
  xenditReferenceId String
  xenditPayoutId    String
  createdAt         DateTime?         @default(now()) @map("created_at")
  updatedAt         DateTime?         @default(now()) @map("updated_at")
  status            PaymentStatusEnum
  subsession        subSession        @relation(fields: [subSessionId], references: [id])
  user              users             @relation(fields: [email], references: [email])
}

model sessions {
  id          String       @id @default(uuid()) @map("_id")
  name        String
  location    String
  sessionDate String
  sessionTime String
  createdAt   DateTime?    @default(now()) @map("created_at")
  updatedAt   DateTime?    @default(now()) @map("updated_at")
  subSession  subSession[]
  rates       rates[]
  status      RecordStatus @default(ACTIVE)
  createdBy   String?
}

model subSession {
  id          String       @id @default(uuid()) @map("_id")
  sessionType SesssionType
  coach       String
  noofTeams   Int
  maxPlayers  Int
  maxperTeam  Int
  createdAt   DateTime?    @default(now()) @map("created_at")
  updatedAt   DateTime?    @default(now()) @map("updated_at")
  sessionId   String
  sessions    sessions     @relation(fields: [sessionId], references: [id])
  teams       teams[]
  users       users[]
  status      RecordStatus @default(ACTIVE)
  createdBy   String?
  payments    payments[]
}

model teams {
  id           String       @id @default(uuid()) @map("_id")
  teamName     String
  color        String
  subSessionId String
  subSession   subSession   @relation(fields: [subSessionId], references: [id])
  createdAt    DateTime?    @default(now()) @map("created_at")
  updatedAt    DateTime?    @default(now()) @map("updated_at")
  players      String[]
  users        users[]      @relation(fields: [players], references: [id])
  status       RecordStatus @default(ACTIVE)
}

model rates {
  id           String       @id @default(uuid()) @map("_id")
  packageName  String
  cashRate     Float
  onlineRate   Float
  sessionCount Int
  createdAt    DateTime?    @default(now()) @map("created_at")
  updatedAt    DateTime?    @default(now()) @map("updated_at")
  sessionId    String
  sessions     sessions     @relation(fields: [sessionId], references: [id])
  status       RecordStatus @default(ACTIVE)
}

model users {
  id            String       @id @default(uuid()) @map("_id")
  firstName     String
  lastName      String
  email         String
  password      String?
  phone         String
  profilePic    String?
  link          String?
  age           Int?
  address       String?
  dateofbirth   DateTime?
  createdAt     DateTime?    @default(now()) @map("created_at")
  updatedAt     DateTime?    @default(now()) @map("updated_at")
  gender        Gender?
  type          UserTypeEnum
  clubs         Clubs[]
  joinedLobbyId String?
  subSession    subSession?  @relation(fields: [joinedLobbyId], references: [id])
  payments      payments[]
  teamId        String[]
  teams         teams[]      @relation(fields: [teamId], references: [id])
  survey        Survey?

  //todo add crossref for xendit refid
  @@unique([email])
}
