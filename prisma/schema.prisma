//ðŸ§©Don't Edit this file.âœ¨Generated in Fri Mar 01 2024 20:15:28 GMT+0800 (Philippine Standard Time)âœ¨

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model clubs {
  id        String    @id @default(uuid()) @map("_id")
  clubName  String
  package   String
  founderId String
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")
  founder   users     @relation(fields: [founderId], references: [id])
}

enum UserTypeEnum {
  ADMIN
  FOUNDER
  USER
  STAFF
}

enum PaymentStatusEnum {
  SUCCESS
  FAILED
  REFUND
  CANCELLED
  PENDING
}

enum Rating {
  TERRIBLE
  BAD
  OKAY
  GOOD
  GREAT
}

enum Gender {
  MALE
  FEMALE
}

enum SesssionType {
  OPENPLAY
  TRAINING
  TOURNAMENT
}

model Faq {
  id        String   @id @default(uuid()) @map("_id")
  question  String
  answer    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

model Feedbacks {
  id               String   @id @default(uuid()) @map("_id")
  experience       String?
  difficultProcess String?
  rating           Rating
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")
}

model payments {
  id                String            @id @default(uuid()) @map("_id")
  email             String
  sessionId         String
  amount            Float
  xenditReferenceId String
  xenditPayoutId    String
  createdAt         DateTime?         @default(now()) @map("created_at")
  updatedAt         DateTime?         @default(now()) @map("updated_at")
  status            PaymentStatusEnum
  session           sessions          @relation(fields: [sessionId], references: [id])
  user              users             @relation(fields: [email], references: [email])
}

model sessions {
  id          String       @id @default(uuid()) @map("_id")
  name        String
  location    String
  sessionDate String
  sessionTime String
  createdAt   DateTime?    @default(now()) @map("created_at")
  updatedAt   DateTime?    @default(now()) @map("updated_at")
  payments    payments[]
  subSession  subSession[]
  rates       rates[]
}

model subSession {
  id          String       @id @default(uuid()) @map("_id")
  sessionType SesssionType
  coach       String
  noofTeams   Int
  maxPlayers  Int
  maxperTeam  Int
  createdAt   DateTime?    @default(now()) @map("created_at")
  updatedAt   DateTime?    @default(now()) @map("updated_at")
  sessionId   String
  sessions    sessions     @relation(fields: [sessionId], references: [id])
  teams       teams[]

  users users[]
}

model teams {
  id           String     @id @default(uuid()) @map("_id")
  teamName     String
  color        String
  subSessionId String
  subSession   subSession @relation(fields: [subSessionId], references: [id])
  createdAt    DateTime?  @default(now()) @map("created_at")
  updatedAt    DateTime?  @default(now()) @map("updated_at")
  players      String[]
  users        users[]    @relation(fields: [players], references: [id])
}

model rates {
  id           String    @id @default(uuid()) @map("_id")
  packageName  String
  cashRate     Float
  onlineRate   Float
  sessionCount Int
  createdAt    DateTime? @default(now()) @map("created_at")
  updatedAt    DateTime? @default(now()) @map("updated_at")
  sessionId    String
  sessions     sessions  @relation(fields: [sessionId], references: [id])
}

model users {
  id           String       @id @default(uuid()) @map("_id")
  firstName    String
  lastName     String
  email        String
  password     String?
  phone        String
  profilePic   String?
  link         String?
  age          Int?
  address      String?
  dateofbirth  DateTime?
  createdAt    DateTime?    @default(now()) @map("created_at")
  updatedAt    DateTime?    @default(now()) @map("updated_at")
  gender       Gender?
  type         UserTypeEnum
  clubs        clubs[]
  subSessionId String?
  subSession   subSession?  @relation(fields: [subSessionId], references: [id])
  payments     payments[]
  teamId       String[]
  teams        teams[]      @relation(fields: [teamId], references: [id])

  @@unique([email])
}
