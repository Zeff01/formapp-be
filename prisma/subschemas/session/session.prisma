import { users } from "..\user\user"
import { payments } from "..\payments\payments"
import { SesssionType, RecordStatus } from "..\enum\enum"
import { sessions, users, users } from "..\..\schema"

model sessions {
  id          String       @id @default(uuid()) @map("_id")
  name        String
  location    String
  sessionDate String
  sessionTime String
  createdAt   DateTime?    @default(now()) @map("created_at")
  updatedAt   DateTime?    @default(now()) @map("updated_at")
  payments    payments[]
  subSession  subSession[]
  rates       rates[]
  status      RecordStatus @default(ACTIVE)
  createdBy   String?
}

model subSession {
  id          String       @id @default(uuid()) @map("_id")
  sessionType SesssionType
  coach       String
  noofTeams   Int
  maxPlayers  Int
  maxperTeam  Int
  createdAt   DateTime?    @default(now()) @map("created_at")
  updatedAt   DateTime?    @default(now()) @map("updated_at")
  sessionId   String
  sessions    sessions     @relation(fields: [sessionId], references: [id])
  teams       teams[]
  users       users[]
  status      RecordStatus @default(ACTIVE)
  createdBy   String?
}

model teams {
  id           String       @id @default(uuid()) @map("_id")
  teamName     String
  color        String
  subSessionId String
  subSession   subSession   @relation(fields: [subSessionId], references: [id])
  createdAt    DateTime?    @default(now()) @map("created_at")
  updatedAt    DateTime?    @default(now()) @map("updated_at")
  players      String[]
  users        users[]      @relation(fields: [players], references: [id])
  status       RecordStatus @default(ACTIVE)
}

model rates {
  id           String       @id @default(uuid()) @map("_id")
  packageName  String
  cashRate     Float
  onlineRate   Float
  sessionCount Int
  createdAt    DateTime?    @default(now()) @map("created_at")
  updatedAt    DateTime?    @default(now()) @map("updated_at")
  sessionId    String
  sessions     sessions     @relation(fields: [sessionId], references: [id])
  status       RecordStatus @default(ACTIVE)
}
